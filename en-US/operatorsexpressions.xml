<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<chapter id="pythonforyouandme-Operators-Expressions">
	<title>Operators and expressions</title>
	<para>
		In python most of the lines you will write will be expressions. Expressions are made of operators and operands. An expression is like <emphasis>2 + 3</emphasis> .
	</para>
	<section id="pythonforyouandme-Operators-Expressions-operators">
		<title>Operators</title>
		<para>
			Operators are the symbols which tells the python interpreter to do some mathematical or logical operation. Few basic examples of mathematical operators are given below:
		</para>
<programlisting language="Python">        
<![CDATA[>>> 2 + 3
5
>>> 23 - 3
20
>>> 22.0 / 12
1.8333333333333333
]]>
</programlisting>
        <para>
            To get floating result you need to the division using any of operand as floating number. To do modulo operation use % operator
        </para>
<programlisting language="Python"> 
<![CDATA[>>> 14 % 3
2
]]>
</programlisting>  
	</section>
	<section id="pythonforyouandme-Operators-Expressions-integer-operations">
		<title>Example of integer arithmetic</title>
		<para>
			The code
		</para>
<programlisting language="Python"> 
<![CDATA[#!/usr/bin/env python
days = int(raw_input("Enter days: "))
months = days / 30
days = days % 30
print "Months = %d Days = %d" % (months, days)
]]>
</programlisting>
        <para>
            The output
        </para>
<programlisting language="Python"> 
<![CDATA[$ ./integer.py
Enter days: 265
Months = 8 Days = 25
]]>
</programlisting> 
        <para>
            In the first line I am taking the input of days, then getting the months and days and at last printing them. You can do it in a easy way
        </para>
<programlisting language="Python"> 
<![CDATA[#!/usr/bin/env python
days = int(raw_input("Enter days: "))
print "Months = %d Days = %d" % (divmod(days, 30))
]]>
</programlisting> 
        <para>
            The divmod(num1, num2) function returns two values , first is the division of num1 and num2 and in second the modulo of num1 and num2.
        </para>
        </section>
        <section id="pythonforyouandme-Operators-Expressions-relational-operators">
    		<title>Relational Operators</title>
    		<para>
    			You can use the following operators as relational operators
    		</para>
    		<segmentedlist><title>Relational Operators</title>
            <?dbhtml list-presentation="list"?>
            <segtitle>Operator</segtitle>
            <segtitle>Meaning</segtitle>
            <seglistitem><seg><![CDATA[<]]></seg><seg>Is less than</seg></seglistitem>
            <seglistitem><seg><![CDATA[<=]]></seg><seg>Is less than or equal to</seg></seglistitem>
            <seglistitem><seg><![CDATA[>]]></seg><seg>Is greater than</seg></seglistitem>
            <seglistitem><seg><![CDATA[>=]]></seg><seg>Is greater than or equal to</seg></seglistitem>
            <seglistitem><seg><![CDATA[==]]></seg><seg>Is equal to</seg></seglistitem>
            <seglistitem><seg><![CDATA[!=]]></seg><seg>Is not equal to</seg></seglistitem>
            </segmentedlist>
    		<para>
    		    Some examples
    		</para>
<programlisting language="Python"> 
<![CDATA[>>> 1 < 2
True
>>> 3 > 34
False
>>> 23 == 45
False
>>> 34 != 323
True
]]>
</programlisting>    		
    	<para>
    	    <emphasis>//</emphasis> operator gives the floor division result
    	</para>
<programlisting language="Python"> 
<![CDATA[>>> 4.0 // 3
1.0
>>> 4.0 / 3
1.3333333333333333
]]>
</programlisting>    	
    </section>
	<section id="pythonforyouandme-Operators-Expressions-logical-operators">
		<title>Logical Operators</title>
		<para>
			To do logical AND , OR we use <emphasis>and</emphasis> ,<emphasis>or</emphasis> keywords. <emphasis>x and y</emphasis> returns <emphasis>False</emphasis> if <emphasis>x</emphasis> is <emphasis>False</emphasis> else it returns evaluation of <emphasis>y</emphasis>. If <emphasis>x</emphasis> is <emphasis>True</emphasis>, it returns <emphasis>True</emphasis>.
		</para>
<programlisting language="Python"> 
<![CDATA[>>> 1 and 4
4
>>> 1 or 4
1
>>> -1 or 4
-1
>>> 0 or 4
4
]]>
</programlisting>
    </section>

	<section id="pythonforyouandme-Operators-Expressions-shorthand-operator">
		<title>Shorthand Operator</title>
		<para>
			<emphasis>x op = expression</emphasis> is the syntax for shorthand operators. It will be evaluated like <emphasis>x = x op expression</emphasis> , Few examples are 
		</para>
<programlisting language="Python"> 
<![CDATA[>>> a = 12
>>> a += 13
>>> a
25
>>> a /= 3
>>> a
8
>>> a += (26* 32)
>>> a
840
]]>
</programlisting>
        <para>
            shorthand.py example
        </para>
<programlisting language="Python"> 
<![CDATA[#!/usr/bin/env python
N = 100
a = 2
while a < N:
    print "%d" % a
    a *= a
]]>
</programlisting>
        <para>
            The output
        </para>
 <programlisting language="Python"> 
<![CDATA[$ ./shorthand.py
2
4
16
]]>
</programlisting>     
	</section>
	<section id="pythonforyouandme-Operators-Expressions-expressions">
		<title>Expressions</title>
		<para>
			Generally while writing expressions we put spaces before and after every operator so that the code becomes clearer to read, like
		</para>
<programlisting language="Python"> 
<![CDATA[a = 234 * (45 - 56.0 / 34)
]]>
</programlisting>
        <para>
            One example code used to show expressions
        </para>
<programlisting language="Python"> 
<![CDATA[#!/usr/bin/env python
a = 9
b = 12
c = 3
x = a -b / 3 + c * 2 -1
y = a -b / (3 + c) * (2 -1)
z = a - (b / (3 +c) * 2) -1
print "X = ", x
print "Y = ", y
print "Z = ", z
]]>
</programlisting>
        <para>
            The output
        </para>
<programlisting language="Python"> 
<![CDATA[$ ./evaluationexp.py
X =  10
Y =  7
Z =  4
]]>
</programlisting>
        <para>
            At first <emphasis>x</emphasis> is being calculated. The steps are like this
        </para>
<programlisting language="Python"> 
<![CDATA[9 - 12 / 3 + 3 * 2 -1
9 - 4 + 3 * 2 - 1
9 - 4 + 6 - 1
5 + 6 -1
11 - 1
10
]]>
</programlisting>
        <para>
            Now for <emphasis>y</emphasis> and <emphasis>z</emphasis> we have parentheses, so the expressions evaluated in different way. Do the calculation yourself to check them.
        </para>
	</section>
	<section id="pythonforyouandme-Operators-Expressions-typeconversions">
		<title>Type Conversions</title>
		<para>
			We have to do the type conversions manually. Like </para>
<programlisting language="Python"> 
<![CDATA[float(string) -> float value
int(string) -> integer value
str(integer) or str(float) -> string representation 
>>> a = 8.126768
>>> str(a)
'8.126768'
]]>
</programlisting>
	</section>
		<section id="pythonforyouandme-Operators-Expressions-evaluateequpy">
		<title>evaluateequ.py</title>
		<para>
			This is a program to evaluate 1/x+1/(x+1)+1/(x+2)+ ... +1/n series upto n, in our case x = 1 and n =10
		</para>
<programlisting language="Python"> 
<![CDATA[#!/usr/bin/env python
sum = 0.0
for i in range(1, 11):
    sum += 1.0 / i
    print "%2d %6.4f" % (i , sum)
]]>
</programlisting>
		<para>
			The output
		</para>
<programlisting language="Python"> 
<![CDATA[$ ./evaluateequ.py
 1 1.0000
 2 1.5000
 3 1.8333
 4 2.0833
 5 2.2833
 6 2.4500
 7 2.5929
 8 2.7179
 9 2.8290
10 2.9290
]]>
</programlisting>

        <para>
            In the line <emphasis>sum += 1.0 / i</emphasis> what is actually happening is <emphasis>sum = sum + 1.0 / i</emphasis>.
        </para>
	</section>
    <section id="pythonforyouandme-Operators-Expressions-quadraticequationpy">
		<title>quadraticequation.py</title>
		<para>
			This is a program to evaluate the quadratic equation
		</para>
<programlisting language="Python"> 
<![CDATA[#!/usr/bin/env python
import math
a = int(raw_input("Enter value of a: "))
b = int(raw_input("Enter value of b: "))
c = int(raw_input("Enter value of c: "))
d = b * b - 4 * a * c
if d < 0:
    print "ROOTS are imaginary"
else:
    root1 = (-b + math.sqrt(d)) / (2.0 * a)
    root2 = (-b - math.sqrt(d)) / (2.0 * a)
print "Root 1 = ", root1
print "Root 2 = ", root2
]]>
</programlisting>
    </section>

    <section id="pythonforyouandme-Operators-Expressions-salesmansalarypy">
		<title>salesmansalary.py</title>
		<para>
			In this example we are going to calculate the salary of a camera salesman. His basic salary is 1500, for every camera he will sell he will get 200 and the commission on the month's sale is 2 %. The input will be number of cameras sold and total price of the cameras.
		</para>
<programlisting language="Python"> 
<![CDATA[#!/usr/bin/env python
basic_salary = 1500
bonus_rate = 200
commision_rate = 0.02
numberofcamera = int(raw_input("Enter the number of inputs sold: "))
price = float(raw_input("Enter the total prices: "))
bonus = (bonus_rate * numberofcamera)
commision = (commision_rate * numberofcamera * price)

print "Bonus        = %6.2f" % bonus
print "Commision    = %6.2f" % commision
print "Gross salary = %6.2f" % ( basic_salary + bonus + commision)
]]>
</programlisting>
        <para>
            The output
        </para>
<programlisting language="Python"> 
<![CDATA[$ ./salesmansalary.py
Enter the number of inputs sold: 5
Enter the total prices: 20450
Bonus        = 1000.00
Commision    = 2045.00
Gross salary = 4545.00
]]>
</programlisting>
    </section>

</chapter>

